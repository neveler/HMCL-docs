name: PR Preview
on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: [labeled, closed]
concurrency:
  group: pr-preview
  cancel-in-progress: false
env:
  GITHUB_PR_NUMBER: ${{ github.event_name == 'issue_comment' && github.event.issue.number || github.event.pull_request.number }}
  GITHUB_PAGE_ORIGIN: https://${{ github.repository_owner }}.github.io
  GITHUB_PAGE_PATHNAME: /${{ github.event.repository.name }}
  JEKYLL_ENV: production
jobs:
  remove:
    if: ${{ (github.event_name == 'pull_request_target' && (github.event.action == 'closed' || (github.event.action == 'labeled' && github.event.label.name == 'preview/remove'))) || (github.event_name == 'issue_comment' && github.event.issue.pull_request && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER') && github.event.comment.body == '/preview remove') }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      pull-requests: write
    steps:
      - name: Restore Pages
        id: restore-pages
        uses: actions/cache/restore@v4
        with:
          key: pages-${{ github.run_id }}
          path: /home/runner/gh-pages
          restore-keys: pages-
      - name: Prepare Pages
        run: |
          mkdir -p /home/runner/gh-pages
          rm -rf /home/runner/gh-pages/.git
          rm -rf /home/runner/gh-pages/PR${{ env.GITHUB_PR_NUMBER }}
          echo "[$(date)] Remove Preview PR${{ env.GITHUB_PR_NUMBER }}" > /home/runner/gh-pages/index.html
      - name: Save Pages
        uses: actions/cache/save@v4
        with:
          key: pages-${{ github.run_id }}
          path: /home/runner/gh-pages
      - name: Comment Message (issue_comment)
        if: ${{ github.event_name == 'issue_comment' }}
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              issue_number: context.issue.number,
              body: "Remove Preview URL: ${{ env.GITHUB_PAGE_ORIGIN }}${{ env.GITHUB_PAGE_PATHNAME }}/PR${{ env.GITHUB_PR_NUMBER }}"
            })
      - name: Comment Message (pull_request_target)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "Remove Preview URL: ${{ env.GITHUB_PAGE_ORIGIN }}${{ env.GITHUB_PAGE_PATHNAME }}/PR${{ env.GITHUB_PR_NUMBER }}"
            })
      - name: Remove History Cache
        if: ${{ steps.restore-pages.outputs.cache-matched-key }}
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.actions.deleteActionsCacheByKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "${{ steps.restore-pages.outputs.cache-matched-key }}"
            })
      - name: Remove Label (pull_request_target)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/github-script@v8
        continue-on-error: true
        with:
          script: |
            github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: "preview/remove"
            })
  prepare:
    if: ${{ (github.event_name == 'pull_request_target' && github.event.action == 'labeled' && github.event.label.name == 'preview/create') || (github.event_name == 'issue_comment' && github.event.issue.pull_request && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER') && github.event.comment.body == '/preview create') }}
    runs-on: ubuntu-latest
    permissions:
      checks: write
    outputs:
      sha: ${{ steps.create-check.outputs.sha }}
      repository: ${{ steps.create-check.outputs.repository }}
      check-id: ${{ steps.create-check.outputs.check-id }}
    steps:
      - name: Create Check
        id: create-check
        uses: actions/github-script@v8
        with:
          script: |
            let pr = context.payload.pull_request;
            if (!pr) {
              const result = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              pr = result.data;
            }
            console.log(pr);
            core.setOutput('sha', pr.head.sha);
            core.setOutput('repository', pr.head.repo.full_name);
            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Create preview",
              head_sha: pr.head.sha,
              status: "in_progress",
              started_at: new Date().toISOString(),
              details_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`,
              output: {
                title: "Create preview by command",
                summary: "Preview is being created..."
              }
            });
            core.setOutput('check-id', check.id);
  build:
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-site.outputs.artifact-id }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.prepare.outputs.sha }}
          repository: ${{ needs.prepare.outputs.repository }}
          fetch-depth: 1
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true
      - name: Jekyll Build
        run: |
          echo "url: ${{ env.GITHUB_PAGE_ORIGIN }}" > _action.yml
          echo "baseurl: ${{ env.GITHUB_PAGE_PATHNAME }}/PR${{ env.GITHUB_PR_NUMBER }}" >> _action.yml
          echo "source: ${{ github.workspace }}" >> _action.yml
          echo "destination: /home/runner/site" >> _action.yml
          bundle exec jekyll build --config _config.yml,_action.yml
      - name: Upload Site
        id: upload-site
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: /home/runner/site
  merge:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ env.GITHUB_PAGE_ORIGIN }}${{ env.GITHUB_PAGE_PATHNAME }}/PR${{ env.GITHUB_PR_NUMBER }}
    permissions:
      actions: write
      pages: write
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - name: Restore Pages
        id: restore-pages
        uses: actions/cache/restore@v4
        with:
          key: pages-${{ github.run_id }}
          path: /home/runner/gh-pages
          restore-keys: pages-
      - name: Prepare Pages
        run: |
          mkdir -p /home/runner/gh-pages
          rm -rf /home/runner/gh-pages/.git
          rm -rf /home/runner/gh-pages/PR${{ env.GITHUB_PR_NUMBER }}
          echo "[$(date)] Preview PR${{ env.GITHUB_PR_NUMBER }}" > /home/runner/gh-pages/index.html
      - name: Merge Site
        uses: actions/download-artifact@v5
        with:
          name: site
          path: /home/runner/gh-pages/PR${{ env.GITHUB_PR_NUMBER }}
      - name: Upload Pages
        uses: actions/upload-pages-artifact@v4
        with:
          name: github-pages
          path: /home/runner/gh-pages
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Deploy Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
      - name: Save Pages
        uses: actions/cache/save@v4
        with:
          key: pages-${{ github.run_id }}
          path: /home/runner/gh-pages
      - name: Remove History Cache
        if: ${{ steps.restore-pages.outputs.cache-matched-key }}
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.actions.deleteActionsCacheByKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "${{ steps.restore-pages.outputs.cache-matched-key }}"
            })
      - name: Remove Temp Artifact
        if: ${{ needs.build.outputs.artifact-id }}
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: "${{ needs.build.outputs.artifact-id }}"
            })
  finally:
    if: ${{ always() && needs.prepare.result == 'success' }}
    needs: [prepare, merge]
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Remove Comment (issue_comment)
        if: ${{ github.event_name == 'issue_comment' }}
        id: comment-message
        uses: actions/github-script@v8
        continue-on-error: true
        with:
          script: |
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
            })
      - name: Remove Label (pull_request_target)
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/github-script@v8
        continue-on-error: true
        with:
          script: |
            github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: "preview/create"
            })
      - name: Check Over
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: ${{ needs.prepare.outputs.check-id }},
              status: "completed",
              conclusion: "${{ needs.merge.result == 'success' && 'success' || 'failure' }}",
              completed_at: new Date().toISOString(),
              details_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`,
              output: {
                title: "Create preview by command",
                summary: "The preview has been generated and deployed successfully."
              }
            });
